1. Введение в JEE. Установка всех необходимых компонентов
Приложения промышленных масштабов. Многоуровневые приложения. Протоколы HTTP, TCP/IP. Клиентская сторона приложений HTML/CSS/JavaScript. Стандарт JEE, чем отличается от JSE, архитектура. Основные компоненты JEE (Servlets, JSP/JSF, JPA, EJB,…). Спецификации JSR и JCP. Сервер приложений. Описание и установка необходимого ПО (JDK8, Glassfish 4.0, Intellij idea, git, maven, postgreSql). Тестовый код, подключение к базе данных.

2. Сервлеты 
Описание сервлетов. Жизненный цикл сервлетов. Способы создания сервлетов. Чтение параметров из запроса. Сессия и куки. Скачивание и загрузка файлов. Многопоточность в сервлетах. Переадресация. Асинхронность выполнения. Слушатели и Фильтры. Авторизация пользователей

http://java-course.ru/student/book1/servlet/
http://javatutor.net/books/tiej/servlets

3. Java Server Pages
Описание JSP. Чтение параметров. Использование java-beans. Подключение сторонних ресурсов. Библиотека тэгов. Шаблонизация проекта. Sql тэги. Мультиязычность. Коды ошибок.

http://www.codenet.ru/webmast/java/jsp.php [!]
http://java-course.ru/student/book1/jsp/
http://orlova.rsue.ru/content/sst/j2ee2.htm
http://javatutor.net/books/tiej/jsp

4. Java Persistent API
Описание JPA. Описание ORM. Реализация Hibernate. Создание Entity. Проектирование DAO классов. Создание query. CriteriaAPI. NativeSQL. Транзакции. Миграция БД.

https://ru.wikipedia.org/wiki/Java_Persistence_API
http://voituk.kiev.ua/2008/01/30/introduction-to-java-persistence-api/
http://devcolibri.com/1658
Hibernate:
https://habrahabr.ru/post/132385/
http://javastudy.ru/hibernate/hibernate-quick-start/
http://javastudy.ru/interview/jee-hibernate-questions-answers/
http://www.journaldev.com/3793/hibernate-tutorial

5. Проектирование “Интернет банка”
Описание архитектуры приложения. Описание интерфейсов и способа их реализации. Демонстрация клиентской стороны и способа взаимодействия с ней. Распределение работы.

6. SOAP веб-сервис
Описание web-сервисов. Описание Soap протокла. Wsdl. Jax-WS. Асинхронность вызова сервиса. Обработка ошибок. Ws-Policy. Клиент для Soap. Проектирование сервиса приема платежей.

https://ru.wikipedia.org/wiki/SOAP
http://ru.khroliz.com/2013/07/java-soap.html (?)
http://javastudy.ru/web-services/soap-java-hello-world-example/
http://info.javarush.ru/eGarmin/2015/03/14/%D0%92%D0%B5%D0%B1-%D1%81%D0%B5%D1%80%D0%B2%D0%B8%D1%81%D1%8B-%D0%A8%D0%B0%D0%B3-1-%D0%A7%D1%82%D0%BE-%D1%82%D0%B0%D0%BA%D0%BE%D0%B5-%D0%B2%D0%B5%D0%B1-%D1%81%D0%B5%D1%80%D0%B2%D0%B8%D1%81-%D0%B8-%D0%BA%D0%B0%D0%BA-%D1%81-%D0%BD%D0%B8%D0%BC-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D1%82%D1%8C-.html

7. REST веб-сервис
Описание Rest технологии. Отличая от Soap. Json объекты, конвертация Java объектов в Json. Переработка сервиса приема платежей, как rest сервис 

8. Клиентская сторона, тестирование 
Создание клиентской части с использованием AngularJs через Ajax-requests. Написание комплексных тестов. Mock-объекты. Подведение итогов. Рекомендуемая литература. Enterprise-фреймворк Spring.